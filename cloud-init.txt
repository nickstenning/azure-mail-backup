#cloud-config
package_upgrade: true
packages:
  - docker.io

disk_setup:
  /dev/disk/azure/scsi1/lun0:
    table_type: gpt
    layout: True
    overwrite: False

fs_setup:
  - device: /dev/disk/azure/scsi1/lun0
    partition: 1
    filesystem: ext4

mounts:
  - [ /dev/disk/azure/scsi1/lun0, /data ]

write_files:
  - path: /opt/mailbackup/bin/mailbackup-run
    permissions: '0755'
    content: |
      #!/bin/sh

      set -eu

      docker pull nickstenning/mail-backup
      exec docker run \
        --rm \
        --detach \
        --net host \
        -v /data/mail:/data \
        -v /opt/mailbackup/etc/offlineimaprc.template:/etc/offlineimaprc.template \
        --env-file /opt/mailbackup/etc/docker.env \
        --log-driver syslog \
        --log-opt tag=mailbackup \
        nickstenning/mail-backup
  - path: /opt/mailbackup/bin/mailbackup-checkshutdown
    permissions: '0755'
    content: |
      #!/bin/sh

      : ${MIN_UPTIME:=60}
      : ${MAX_UPTIME:=1800}

      set -eu

      UPTIME=$(cut -d. -f1 /proc/uptime)

      # Do nothing if we've been up less than $MIN_UPTIME
      if [ "$UPTIME" -lt "$MIN_UPTIME" ]; then
        exit
      fi

      # If we've been up more than $MAX_UPTIME, just shut down unconditionally.
      #
      # This appears to be necessary when the deallocate call succeeds but the
      # deallocation itself gets lost within Azure. The result is that the VM
      # itself is never shut down, but its connection to IMDS is broken so none
      # of what follows can succeed.
      if [ "$UPTIME" -gt "$MAX_UPTIME" ]; then
        shutdown -h now
        exit
      fi

      # If nothing is running, shut down.
      if [ -z "$(docker ps -q 2>/dev/null)" ]; then
        RESOURCE_ID=$(curl -sSL -H Metadata:true "http://169.254.169.254/metadata/instance?api-version=2019-06-01" | grep -Eo '"resourceId":"[^"]+"' | cut -d'"' -f4)
        TOKEN=$(curl -sSL -H Metadata:true "http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=https://management.azure.com/" | grep -Eo '"access_token":"[^"]+"' | cut -d'"' -f4)

        curl -sSL \
          -H "Authorization: Bearer ${TOKEN}" \
          -X POST \
          -d "" \
          -o /dev/null \
          "https://management.azure.com${RESOURCE_ID}/deallocate?api-version=2018-06-01"
      fi
  - path: /opt/mailbackup/etc/docker.env
    permissions: '0600'
    content: |
      MAIL_USER=fixme
      MAIL_PASSWORD=fixme
      SNITCH_URL=fixme
  - path: /opt/mailbackup/etc/offlineimaprc.template
    permissions: '0644'
    content: |
      [general]
      metadata = /data/metadata
      ui = Basic
      accounts = FastMail
      fsync = True

      [Account FastMail]
      localrepository = LocalFM
      remoterepository = RemoteFM

      [Repository LocalFM]
      type = Maildir
      localfolders = /data/mail/fastmail

      [Repository RemoteFM]
      type = IMAP
      remotehost = mail.messagingengine.com
      remoteport = 993
      remoteuser = ${MAIL_USER}
      remotepass = ${MAIL_PASSWORD}
      ssl = yes
      sslcacertfile = /etc/ssl/certs/ca-certificates.crt
      holdconnectionopen = yes
      maxconnections = 5
      folderfilter = lambda folder: not folder.startswith('RESTORED') and folder not in ['INBOX.Junk Mail']
  - path: /opt/mailbackup/README
    permissions: '0644'
    content: |
      mail backup server
      ------------------

      On first boot, you should do the following:

      1. Configure mail credentials in /opt/mailbackup/etc/docker.env.

      2. Install a crontab for the admin user with the following entries:

             @reboot sudo mailbackup-run
             * * * * * sudo mailbackup-checkshutdown

      3. Reboot.

runcmd:
  - ['ln', '-s', '/opt/mailbackup/bin/mailbackup-run', '/usr/bin/mailbackup-run']
  - ['ln', '-s', '/opt/mailbackup/bin/mailbackup-checkshutdown', '/usr/bin/mailbackup-checkshutdown']

# vim:ft=yaml:
